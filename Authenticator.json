{
    "openapi": "3.0.0",
    "info": {
        "title": "Inove Authenticator API",
        "version": "1.0.0"
    },
    "paths": {
        "/api/auth/login": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Sign in",
                "description": "Login by email, password",
                "operationId": "authLogin",
                "requestBody": {
                    "description": "Pass user credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@inove.cz"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    },
                                    "remember": {
                                        "type": "boolean",
                                        "example": "true"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "UserResource": {
                                            "$ref": "#/components/schemas/UserResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Sorry, wrong email address or password. Please try again"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "string1": {
                                        "summary": "The email field is required.",
                                        "value": "The email field is required."
                                    },
                                    "string2": {
                                        "summary": "The selected email is invalid.",
                                        "value": "The selected email is invalid."
                                    },
                                    "string3": {
                                        "summary": "The password field is required.",
                                        "value": "The password field is required."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Registration",
                "description": "Create new user",
                "operationId": "authRegister",
                "requestBody": {
                    "description": "Pass user information",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "surname",
                                    "email",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "Jan"
                                    },
                                    "surname": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "Nov√°k"
                                    },
                                    "gender": {
                                        "type": "string",
                                        "default": "OTHER",
                                        "enum": [
                                            "MALE",
                                            "FEMALE",
                                            "OTHER"
                                        ],
                                        "example": "OTHER"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "jan.novak@seznam.cz"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User has been successfuly created"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "string1": {
                                        "summary": "Email already exists",
                                        "value": "The email has already been taken."
                                    },
                                    "string2": {
                                        "summary": "Invalid gender",
                                        "value": "The selected gender is invalid."
                                    },
                                    "string3": {
                                        "summary": "Required field",
                                        "value": "The * field is required."
                                    },
                                    "string4": {
                                        "summary": "Password confirmation",
                                        "value": "The password confirmation does not match."
                                    },
                                    "string5": {
                                        "summary": "Password length",
                                        "value": "The password must be at least 8 characters."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/blacklists/paginate": {
            "post": {
                "tags": [
                    "blacklist"
                ],
                "summary": "Get paginated list of blacklisted records",
                "description": "Allow to return n records using filters, search, order",
                "operationId": "blacklistsPaginate",
                "requestBody": {
                    "description": "Pass pagination data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "type"
                                ],
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "IP",
                                            "DOMAIN",
                                            "EMAIL"
                                        ],
                                        "example": "DOMAIN"
                                    },
                                    "page_length": {
                                        "type": "integer",
                                        "example": "10"
                                    },
                                    "page": {
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "filter": {
                                        "type": "string",
                                        "default": "all",
                                        "example": "all"
                                    },
                                    "search": {
                                        "type": "string",
                                        "default": "",
                                        "example": "seznam.cz"
                                    },
                                    "order_by": {
                                        "type": "string",
                                        "enum": [
                                            "id",
                                            "value",
                                            "reason",
                                            "active",
                                            "created_at"
                                        ],
                                        "example": "id"
                                    },
                                    "sort_asc": {
                                        "type": "boolean",
                                        "default": "0",
                                        "example": "1"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "BlacklistPaginator": {
                                            "$ref": "#/components/schemas/BlacklistPaginator"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "string": {
                                        "summary": "The type field is required.",
                                        "value": "The type field is required."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/blacklists": {
            "post": {
                "tags": [
                    "blacklist"
                ],
                "summary": "Update or create blacklist record",
                "description": "Save blacklist record",
                "operationId": "blacklistsUpdateOrCreate",
                "requestBody": {
                    "description": "Pass blacklist record data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "type",
                                    "value"
                                ],
                                "properties": {
                                    "id": {
                                        "description": "Identificator of the blacklist record. If provided, update is performed",
                                        "type": "integer",
                                        "example": "15",
                                        "nullable": "true"
                                    },
                                    "type": {
                                        "description": "Blacklist type",
                                        "type": "string",
                                        "enum": [
                                            "IP",
                                            "DOMAIN",
                                            "EMAIL"
                                        ],
                                        "example": "DOMAIN"
                                    },
                                    "value": {
                                        "description": "The value to be processed against the entity",
                                        "type": "string",
                                        "example": "snoopy."
                                    },
                                    "reason": {
                                        "description": "Note",
                                        "type": "string",
                                        "example": "Too many spammers..."
                                    },
                                    "active": {
                                        "description": "If true, current blacklist object will be processed",
                                        "type": "boolean",
                                        "default": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "BlacklistResource": {
                                            "$ref": "#/components/schemas/BlacklistResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "blacklist.type_value_combination_exists"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "blacklist"
                ],
                "summary": "Delete blacklist record",
                "description": "Delete blacklist record",
                "operationId": "blacklistsDestroy",
                "requestBody": {
                    "description": "Pass blacklist record identificator",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "_method",
                                    "id"
                                ],
                                "properties": {
                                    "_method": {
                                        "description": "Router method specification - always 'delete'",
                                        "type": "string",
                                        "example": "delete"
                                    },
                                    "id": {
                                        "description": "Identificator of the blacklist record",
                                        "type": "integer",
                                        "example": "15"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "blacklist.deleted"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "blacklist.delete_failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/blacklists/toggle-active": {
            "post": {
                "tags": [
                    "blacklist"
                ],
                "summary": "Toggle active state ",
                "description": "Toggle active state of the blacklist record",
                "operationId": "toggleActive",
                "requestBody": {
                    "description": "Pass blacklist record identificator",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "id"
                                ],
                                "properties": {
                                    "id": {
                                        "description": "Identificator of the blacklist record",
                                        "type": "integer",
                                        "example": "15"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "BlacklistResource": {
                                            "$ref": "#/components/schemas/BlacklistResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/settings": {
            "post": {
                "tags": [
                    "setting"
                ],
                "summary": "Update setting value",
                "description": "Update setting value",
                "operationId": "settingUpdate",
                "requestBody": {
                    "description": "Pass setting key-value pair",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "key",
                                    "value"
                                ],
                                "properties": {
                                    "key": {
                                        "description": "Setting's key name (in dotted notation)",
                                        "type": "string",
                                        "example": "scoring.password.leaks"
                                    },
                                    "value": {
                                        "description": "The value of the setting (int|string|bool)",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "setting.dotted.path": {
                                            "type": "string",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Sorry, the requested resource could not be found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "EnumTrait": {
                "properties": {
                    "gender": {
                        "type": "string",
                        "enum": [
                            "MALE",
                            "FEMALE",
                            "OTHER"
                        ],
                        "readOnly": "true"
                    }
                },
                "type": "object"
            },
            "UserResource": {
                "properties": {
                    "hash": {
                        "type": "string",
                        "example": "97b2160d0a3f4b2c9afbdf423c0047f5"
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 64,
                        "example": "John"
                    },
                    "surname": {
                        "type": "string",
                        "maxLength": 64,
                        "example": "Doe"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/EnumTrait/properties/gender"
                    },
                    "email": {
                        "schema": "UserResource",
                        "description": "User unique email address",
                        "type": "string",
                        "format": "email",
                        "readOnly": "true",
                        "example": "user@gmail.com"
                    },
                    "created_at": {
                        "$ref": "#/components/schemas/ModelTrait/properties/created_at"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "UserResource"
                }
            },
            "ModelTrait": {
                "properties": {
                    "id": {
                        "description": "Identificator of the current object",
                        "type": "integer",
                        "readOnly": "true",
                        "example": 1
                    },
                    "created_at": {
                        "description": "Initial creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true",
                        "example": "2022-10-10T00:00:00"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": "true",
                        "example": "2022-10-10T00:00:00"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ModelTrait"
                }
            },
            "ArrayField": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                },
                "type": "object"
            },
            "BlacklistPaginator": {
                "properties": {
                    "pageLength": {
                        "description": "Max received items per request",
                        "type": "integer",
                        "example": 10
                    },
                    "page": {
                        "description": "Paging of the received objects",
                        "type": "integer",
                        "example": 1
                    },
                    "total": {
                        "description": "Count of received objects including filter and search",
                        "type": "integer",
                        "example": 18
                    },
                    "filter": {
                        "description": "Filter to search in",
                        "type": "string",
                        "default": "all",
                        "enum": [
                            "all",
                            "value",
                            "reason"
                        ],
                        "example": "all"
                    },
                    "search": {
                        "description": "Searched string",
                        "type": "string",
                        "default": null,
                        "example": "net",
                        "nullable": "true"
                    },
                    "orderBy": {
                        "description": "Object's property to order by",
                        "type": "string",
                        "enum": [
                            "id",
                            "value",
                            "reason",
                            "active",
                            "created_at"
                        ],
                        "example": "id"
                    },
                    "sortAsc": {
                        "description": "Toggle if order should be ascending (true) or descending (false)",
                        "type": "boolean",
                        "default": false,
                        "example": true
                    },
                    "data": {
                        "description": "Array of received objects",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BlacklistResource"
                        },
                        "example": [
                            {
                                "id": 4,
                                "type": "DOMAIN",
                                "value": "fraud.net",
                                "reason": "Known fraud domain.",
                                "active": false,
                                "created_at": "2022-11-09T08:34:42"
                            },
                            {
                                "id": 21,
                                "type": "DOMAIN",
                                "value": "capkova.net",
                                "reason": null,
                                "active": false,
                                "created_at": "2022-11-12T13:24:39"
                            },
                            {
                                "id": "...",
                                "type": "...",
                                "value": "...",
                                "reason": "...",
                                "active": "...",
                                "created_at": "..."
                            }
                        ]
                    },
                    "next_page": {
                        "description": "Number of the next page, if exists. If current page is last, value is null",
                        "type": "integer",
                        "example": 2,
                        "nullable": "true"
                    },
                    "prev_page": {
                        "description": "Number of the previous page, if exists. If current page is first, value is null",
                        "type": "integer",
                        "example": null,
                        "nullable": "true"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "BlacklistPaginator"
                }
            },
            "BlacklistResource": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ModelTrait/properties/id"
                    },
                    "type": {
                        "description": "Blacklist type",
                        "type": "string",
                        "enum": [
                            "IP",
                            "DOMAIN",
                            "EMAIL"
                        ],
                        "example": "DOMAIN"
                    },
                    "value": {
                        "description": "The value to be processed against the entity",
                        "type": "string",
                        "example": "snoopy."
                    },
                    "reason": {
                        "description": "Note",
                        "type": "string",
                        "example": "Too many spammers..."
                    },
                    "active": {
                        "description": "If true, current blacklist object will be processed",
                        "type": "boolean",
                        "default": true
                    },
                    "created_at": {
                        "$ref": "#/components/schemas/ModelTrait/properties/created_at"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "BlacklistResource"
                }
            },
            "BooleanField": {
                "properties": {
                    "value": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "IntegerField": {
                "properties": {
                    "value": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "ObjectField": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "StringField": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    }
}